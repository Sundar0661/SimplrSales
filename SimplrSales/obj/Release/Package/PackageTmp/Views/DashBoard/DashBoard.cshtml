@{
    ViewBag.Title = "DashBoard";
}


@using System.Data
@using System.Data.SqlClient
@model System.Data.DataTable
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    @*    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Example of Bootstrap 3 Static Navbar Extended</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>*@

@*    <script src="~/Scripts/jquery-1.8.2.js"></script>
    <script src="~/Scripts/jquery-1.8.2.min.js"></script>*@
    <style type="text/css">
        .bs-example {
            margin: 5px;
        }

        .container {
            width: 97%;
            height: 100%;
            /*padding: 50px;*/
            border: 2px solid #e7e7e7;
        }

        .div1 {
            width: 276px;
            height: 100px;
            border: 2px solid #c5e60b;
            border-radius: 19px;
            margin-top: 3%;
            margin-bottom: 10px;
            margin-left: 2%;
        }

        .div2 {
            width: 276px;
            height: 100px;
            border: 2px solid #78cdf5;
            border-radius: 19px;
            margin-top: 3%;
            margin-bottom: 10px;
            margin-left: 2%;
        }

        .maindiv {
            /*width: 63%;
            height: 476px;
            border: 1px solid #52ab0f;
            border-radius: 19px;
            margin-top: -21%;
            margin-left: 30%;
            margin-bottom: 10px;
            margin-bottom: 40px;*/
            width: 50%;
            height: 476px;
            /* border: 1px solid #52ab0f; */
            border-radius: 5px;
            margin-top: -21%;
            margin-left: 50%;
            margin-bottom: 10px;
            margin-bottom: 40px;
        }

        @@media only screen and (max-width: 700px) {
            .maindiv {
                width: 97%;
                height: 476px;
                border: 1px solid #52ab0f;
                border-radius: 19px;
                margin-top: 10%;
                margin-left: 5%;
                margin-bottom: 10px;
            }
        }
    </style>
</head>
<body>

    <div class="container">
        <h3 style="color: seagreen;">Dashboard</h3>

        @*            <div class="div1">
        <h4 style="margin-left: 25px; color: #2eb92e; margin-top: 15px;">Total Customers</h4
        </div>
   
        <div class="div2">
            <h4 style="margin-left: 25px; color: #0d58ce; margin-top: 15px;">Sales</h4>
        </div>
         *@
        <div style="width: 50%">
            <div id="area5"></div>
            <div id="area6" style="display: none"></div>
            <div id="area4"></div>
        </div>
        @*<div style="width: 50%">*@
        <div class="maindiv" style="display: none">
            <form>
                <table id="table" border="1">
                    <thead>
                        <tr style="background-color: lightgray">
                            <td>ReportId 
                            </td>
                            <td>ReportName
                            </td>
                            <td>ScreenName
                            </td>
                            @*      <td>ts</td> 
                            <td>SolutionName</td> 
                            <td>Active</td>*@
                        </tr>
                    </thead>
                    @foreach (DataRow dr in Model.Rows)
                    {  
                        <tr>
                            <td>@dr["ReportId"].ToString()  </td>
                            <td>@dr["ReportName"].ToString()  </td>
                            <td>@dr["ScreenName"].ToString()  </td>
                            @*<td>@dr["ts"].ToString()  </td> 
                            <td>@dr["SolutionName"].ToString()</td>
                            <td>@dr["Active"].ToString()</td>*@
                        </tr>  
                    }

                </table>
                <br />


            </form>

        </div>
    </div>

    <style>
        .bar {
            fill: steelblue;
        }

            .bar:hover {
                fill: brown;
            }

        .axis--x path {
            display: none;
        }
        /*body {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  width: 960px;
  height: 500px;
  position: relative;
}*/
        path.slice {
            stroke-width: 2px;
        }

        polyline {
            opacity: .3;
            stroke: black;
            stroke-width: 2px;
            fill: none;
        }

        svg text.percent {
            fill: white;
            text-anchor: middle;
            font-size: 12px;
        }

        .axis--x path {
            display: none;
        }

        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
        }
    </style>
    @*<div id="area5"></div>
<div id="area6"></div>
<div id="area4"></div>*@

    @*<svg width="960" height="500"></svg>*@
    <script src="http://d3js.org/d3.v3.min.js"></script>
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <script src="~/Scripts/Donut3D.js"></script>
    <script>

        //var chart1 = d3.select("#area1").append("svg")
        //var chart2 = d3.select("#area2").append("svg")

        // BARCHART - 04

        //todo
        //var svg = d3.select("#area4").append("svg").attr("width", 700).attr("height", 300);
        //margin = { top: 20, right: 20, bottom: 30, left: 40 },
        //width = +svg.attr("width") - margin.left - margin.right,
        //height = +svg.attr("height") - margin.top - margin.bottom;

        //var x = d3.scaleBand().rangeRound([0, width]).padding(0.1),
        //    y = d3.scaleLinear().rangeRound([height, 0]);

        //var g = svg.append("g")
        //    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        //g.append("g")
        //  .attr("class", "axis axis--x")
        //  .attr("transform", "translate(0," + height + ")")
        //  .call(d3.axisBottom(x));

        //g.append("g")
        //    .attr("class", "axis axis--y")
        //    .call(d3.axisLeft(y).ticks(10, "%"))
        //  .append("text")
        //    .attr("transform", "rotate(-90)")
        //    .attr("y", 6)
        //    .attr("dy", "0.71em")
        //    .attr("text-anchor", "end")
        //    .text("Frequency");
        ///

        function rep(data) {

            $("#area4").empty();
            var svg = d3.select("#area4").append("svg").attr("width", 700).attr("height", 300);
            margin = { top: 20, right: 20, bottom: 30, left: 40 },
            width = +svg.attr("width") - margin.left - margin.right,
            height = +svg.attr("height") - margin.top - margin.bottom;

            var x = d3.scaleBand().rangeRound([0, width]).padding(0.1),
                y = d3.scaleLinear().rangeRound([height, 0]);

            var g = svg.append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            g.append("g")
              .attr("class", "axis axis--x")
              .attr("transform", "translate(0," + height + ")")
              .call(d3.axisBottom(x));

            g.append("g")
                .attr("class", "axis axis--y")
                .call(d3.axisLeft(y).ticks(10, "%"))
              .append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", "0.71em")
                .attr("text-anchor", "end")
                .text("Frequency");

            x.domain(data.map(function (d) { return d.letter; }));
            y.domain([0, d3.max(data, function (d) { return d.frequency; })]);


            g.selectAll(".bar")
              .data(data)
              .enter().append("rect")
                .attr("class", "bar")
                .attr("x", function (d) { return x(d.letter); })
                .attr("y", function (d) { return y(d.frequency); })
                .attr("width", x.bandwidth())
                .attr("height", function (d) { return height - y(d.frequency); });

        }
        // CHART -04


        //CHART- 05

        var salesData = '';
        function rep1(data) {
            $("#area5").empty();

            salesData = data;
            var svg = d3.select("#area5").append("svg").attr("width", 700).attr("height", 300);

            svg.append("g").attr("id", "salesDonut");
            svg.append("g").attr("id", "quotesDonut");

            Donut3D.draw("salesDonut", randomData(), 150, 150, 130, 100, 30, 0.4);
            Donut3D.draw("quotesDonut", randomData(), 450, 150, 130, 100, 30, 0);
        }
        function changeData() {
            Donut3D.transition("salesDonut", randomData(), 130, 100, 30, 0.4);
            Donut3D.transition("quotesDonut", randomData(), 130, 100, 30, 0);
        }

        function randomData() {

            return salesData.map(function (d) {
                return { label: d.label, value: 1000 * Math.random(), color: d.color };
            });
        }

        //CHART- 05



    </script>






    <script src="~/Scripts/jquery-1.7.1.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.8.20.min.js"></script>
    <script src="~/Scripts/d3.v3.min.js"></script>
    <meta name="viewport" content="width=device-width" />
    <head>

        <title>Home</title>
    </head>
    <style>
        .bar {
            fill: steelblue; /*#FECB69;*/
        }

            .bar:hover {
                fill: brown;
            }

        .axis {
            font: 10px sans-serif;
        }

            .axis path,
            .axis line {
                fill: none;
                stroke: #fff;
                shape-rendering: crispEdges;
            }

        .x.axis path {
            display: none;
        }
    </style>





    <script type="text/javascript">
        $("#table tr").click(function (event) {
            var textvalue = event.currentTarget.cells[0].innerText;
            var textvalue1 = event.currentTarget.cells[2].innerText;

            $(this).addClass('selected').siblings().removeClass('selected');
            var value = $(this).find('td:first').html();
            // alert(textvalue1 + "-" + textvalue);

            $.ajax({
                type: 'POST',
                url: '/DashBoard/Queryconfig',          //data: { ScreenName: screenName },
                data: { screenname: textvalue1.replace(" ", "") + "-" + textvalue.replace(" ", "") },
                dataType: 'json',
                success: function (data) {


                    //var query1 = data.replace('},', '},##')
                    //var query1 = data.replace(/},/g, "}##")  
                    //var query1 = data.replace(/","/g, "@@").replace(/},/g, "}##").replace(/"/g, "").replace('[', '').replace(']', '');
                    //query1 = "'"+ query1"'"+;
                    var data1 = data;
                    $('#area5').hide();
                    $('#area6').hide();
                    $('#area4').hide();
                    //alert(query1);
                    //  rep(eval("(" + query1 + ")"));
                    textvalue = textvalue.replace(" ", "");
                    if (textvalue == '04') {
                        $('#area4').show();
                        rep(data);
                    }
                    else if (textvalue == '05') {
                        $('#area5').show();
                        rep1(data);
                    }
                    else if (textvalue == '06') {
                        $('#area6').show();
                        rep2(data);
                    }
                    else if (textvalue == '10') {
                        $('#area6').show();
                        rep2(data);
                    }
                    else if (textvalue == '12') {
                        $('#area4').show();
                        rep(data);
                    }
                }
            });
        });


    </script>




    <style>
        .axis--x path {
            display: none;
        }

        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
        }
    </style>
    @*<svg width="960" height="500"></svg>*@
    <script src="//d3js.org/d3.v4.min.js"></script>

    @*<pre id="csv">date,New York,San Francisco,Austin
20111001,63.4,62.7,72.2
20111002,58.0,59.9,67.7</pre>


<pre id="csv">
date,New York,San Francisco,Austin
20111001,63.4,62.7,72.2
20111002,58.0,59.9,67.7   

</pre>*@


    <script>

        ///todo
        //var svg = d3.select("#area6").append("svg").attr("width", 700).attr("height", 300);
        //margin = { top: 20, right: 80, bottom: 30, left: 50 },
        //width = svg.attr("width") - margin.left - margin.right,
        //height = svg.attr("height") - margin.top - margin.bottom,
        //g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        ////var parseTime = d3.timeParse("%Y%m%d");

        //var x = d3.scaleTime().range([0, width]),
        //    y = d3.scaleLinear().range([height, 0]),
        //    z = d3.scaleOrdinal(d3.schemeCategory10);

        //var line = d3.line()
        //    .curve(d3.curveBasis)
        //    .x(function (d) { return x(d.date); })
        //    .y(function (d) { return y(d.temperature); });

        ///

        // var parseTime = d3.timeParse("%Y%m%d");
        //var data = d3.csvParse(d3.select("#csv").text(), type);

        function rep2(data) {
            $("#area6").empty();

            var svg = d3.select("#area6").append("svg").attr("width", 700).attr("height", 300);
            margin = { top: 20, right: 80, bottom: 30, left: 50 },
            width = svg.attr("width") - margin.left - margin.right,
            height = svg.attr("height") - margin.top - margin.bottom,
            g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            //var parseTime = d3.timeParse("%Y%m%d");

            var x = d3.scaleTime().range([0, width]),
                y = d3.scaleLinear().range([height, 0]),
                z = d3.scaleOrdinal(d3.schemeCategory10);

            var line = d3.line()
                .curve(d3.curveBasis)
                .x(function (d) { return x(d.date); })
                .y(function (d) { return y(d.temperature); });




            //d3.tsv("data.tsv", type, function (error, data) {


            //if (error) throw error;
            //data.columns = ["date", "New York", "San Francisco", "Austin"];
            data.columns = ["date", "Label", "Value"];
            var cities = data.columns.slice(1).map(function (id) {
                return {
                    id: id,
                    values: data.map(function (d) {
                        return { date: d.date, temperature: d[id] };
                    })
                };
            });

            x.domain(d3.extent(data, function (d) { return d.date; }));

            y.domain([
              d3.min(cities, function (c) { return d3.min(c.values, function (d) { return d.temperature; }); }),
              d3.max(cities, function (c) { return d3.max(c.values, function (d) { return d.temperature; }); })
            ]);

            z.domain(cities.map(function (c) { return c.id; }));

            g.append("g")
                .attr("class", "axis axis--x")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));

            g.append("g")
                .attr("class", "axis axis--y")
                .call(d3.axisLeft(y))
              .append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", "0.71em")
                .attr("fill", "#000")
                .text("Temperature, ºF");

            var city = g.selectAll(".city")
              .data(cities)
              .enter().append("g")
                .attr("class", "city");

            city.append("path")
                .attr("class", "line")
                .attr("d", function (d) { return line(d.values); })
                .style("stroke", function (d) { return z(d.id); });

            city.append("text")
                .datum(function (d) { return { id: d.id, value: d.values[d.values.length - 1] }; })
                .attr("transform", function (d) { return "translate(" + x(d.value.date) + "," + y(d.value.temperature) + ")"; })
                .attr("x", 3)
                .attr("dy", "0.35em")
                .style("font", "10px sans-serif")
                .text(function (d) { return d.id; });
            //  });
        }
        function type(d, _, columns) {
            //   
            d.date = parseTime(d.date);
            for (var i = 1, n = columns.length, c; i < n; ++i) d[c = columns[i]] = +d[c];
            return d;
        }

    </script>



</body>
</html>



